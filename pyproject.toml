[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "c2s-scale-gemma"
version = "0.1.0"
description = "C2S-Scale-Gemma Hybrid: Dual-encoder system combining UHG-HGNN and C2S-Scale-Gemma"
authors = [
    {name = "Zach Bovaird", email = "zbovaird@example.com"},
]
readme = "README.md"
license = {text = "CC BY-NC-ND 4.0"}
requires-python = ">=3.9"
keywords = ["single-cell", "transcriptomics", "language-models", "hyperbolic-geometry", "graph-neural-networks"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

dependencies = [
    # Core ML frameworks
    "torch>=2.3.0",
    "torchvision>=0.18.0",
    "torchaudio>=2.3.0",
    "transformers>=4.43.0",
    "accelerate>=1.1.0",
    "tiktoken>=0.5.0",
    "bitsandbytes>=0.43.0; platform_machine != 'arm64'",
    "peft>=0.11.0",
    
    # UHG library (custom)
    "uhg",
    
    # Single-cell analysis
    "scanpy>=1.9.0",
    "anndata>=0.10.0",
    "umap-learn>=0.5.0",
    "pynndescent>=0.5.0",
    
    # Graph processing
    "networkx>=3.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    
    # Data handling
    "datasets>=2.20.0",
    "h5py>=3.8.0",
    "pyarrow>=12.0.0",
    
    # Training infrastructure
    "mlflow>=2.8.0",
    "omegaconf>=2.3.0",
    "wandb>=0.16.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "toml>=0.10.2",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

colab = [
    "google-cloud-storage>=2.10.0",
]

vertex = [
    "google-cloud-aiplatform>=1.35.0",
    "google-cloud-storage>=2.10.0",
    "google-cloud-logging>=3.8.0",
]

[project.urls]
Homepage = "https://github.com/zbovaird/C2S-Scale-Gemma"
Repository = "https://github.com/zbovaird/C2S-Scale-Gemma"
Documentation = "https://github.com/zbovaird/C2S-Scale-Gemma#readme"
Issues = "https://github.com/zbovaird/C2S-Scale-Gemma/issues"

[project.scripts]
c2s-download = "scripts.download_data:main"
c2s-build-graphs = "scripts.build_graphs:main"
c2s-pretrain-hgnn = "scripts.pretrain_hgnn:main"
c2s-align = "scripts.align_dual_encoder:main"
c2s-finetune = "scripts.finetune_lora:main"
c2s-evaluate = "scripts.evaluate:main"
c2s-export = "scripts.export_artifacts:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "scanpy.*",
    "anndata.*",
    "umap.*",
    "pynndescent.*",
    "networkx.*",
    "sklearn.*",
    "mlflow.*",
    "wandb.*",
    "omegaconf.*",
    "transformers.*",
    "peft.*",
    "bitsandbytes.*",
    "accelerate.*",
    "datasets.*",
    "uhg.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
